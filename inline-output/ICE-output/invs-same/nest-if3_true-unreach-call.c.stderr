REL NAME TO C5 NAME MAP:
verifier.error, PRED_0
main@entry, PRED_1
main@_bb, PRED_2
main@.lr.ph, PRED_3
main@verifier.error.split, PRED_4
pos.query.pred, PRED_5
(verifier.error V_0 V_1 V_2)
(main@entry V_0)
(main@_bb V_0 V_1 V_2 V_3)
(main@.lr.ph V_0 V_1 V_2 V_3 V_4)
main@verifier.error.split
pos.query.pred
DB: 
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
(main@verifier.error.split&&(main@entry main@entry_0_0))
NEG CEX IS: main@verifier.error.split
ANSWER ARGS:
NEG CEX, INDEX IS 0
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 0 0 1 0)
  (main@_bb 2 0 0 1)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@_bb 2 0 0 1)
ANSWER ARGS:
2
0
0
1
NEG CEX, INDEX IS 1
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 main@.lr.ph_2_0 main@.lr.ph_3_0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 main@.lr.ph_2_0 main@.lr.ph_3_0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
main@.lr.ph_3_0
UNCERTAIN VALUE: main@.lr.ph_3_0
0
NEG CEX, INDEX IS 2
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not true))
(assert true)
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@.lr.ph_1 () Bool)
(declare-fun main@%i.0.i1_1 () Int)

(assert (not true))
(assert true)
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
NEW CANDIDATE: false
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : false
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : false
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (main@.lr.ph main@.lr.ph_0_0 1 1 2 1)
  (main@_bb 0 1 1 2)
  (main@entry 0)
]
POS OBJ PRED: (main@.lr.ph V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (main@.lr.ph main@.lr.ph_0_0 1 1 2 1)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
1
1
2
1
POS CEX, INDEX IS 3
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (main@_bb main@_bb_0_0 1 1 0)
  (main@entry 3)
]
POS OBJ PRED: (main@_bb V_0 V_1 V_2 V_3)
POS CEX IS: (main@_bb main@_bb_0_0 1 1 0)
ANSWER ARGS:
main@_bb_0_0
UNCERTAIN VALUE: main@_bb_0_0
1
1
0
POS CEX, INDEX IS 4
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not false))
(assert false)
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@.lr.ph_1 () Bool)
(declare-fun main@%i.0.i1_1 () Int)

(assert (not false))
(assert false)
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1-PRED_2!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!((V_1-V_3)<=-1)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!((V_1-V_3)<=-1)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!(V_1<=0)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!((V_1-V_3)<=-1)))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (main@_bb main@_bb_0_0 1 1 2)
  (main@entry 3)
]
POS OBJ PRED: (main@_bb V_0 V_1 V_2 V_3)
POS CEX IS: (main@_bb main@_bb_0_0 1 1 2)
ANSWER ARGS:
main@_bb_0_0
UNCERTAIN VALUE: main@_bb_0_0
1
1
2
POS CEX, INDEX IS 5
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!((V_1-V_3)<=-1))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 1 main@.lr.ph_2_0 main@.lr.ph_3_0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 1 main@.lr.ph_2_0 main@.lr.ph_3_0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
1
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
main@.lr.ph_3_0
UNCERTAIN VALUE: main@.lr.ph_3_0
0
NEG CEX, INDEX IS 6
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (let ((a!1 (and true (not (<= (- main@%l.0.i_2 main@%_1_0) (- 1))))))
  (not a!1)))
(assert (and true (not (<= (- main@%l.0.i_0 main@%_1_0) (- 1)))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@.lr.ph_1 () Bool)

(assert (not (and true (not (<= main@%l.0.i_0 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_2
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_2<=0)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!(V_2<=0)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!(V_2<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_2<=0))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 1 main@.lr.ph_3_0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 1 main@.lr.ph_3_0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
1
main@.lr.ph_3_0
UNCERTAIN VALUE: main@.lr.ph_3_0
0
NEG CEX, INDEX IS 7
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@.lr.ph_1 () Bool)

(assert (not (and true (not (<= main@%k.0.i_0 0)))))
(assert (and true (not (<= main@%k.0.i_0 0))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_4<=0)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!(V_4<=0)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!(V_4<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_4<=0))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 0 0 1 0)
  (main@_bb 2 0 0 1)
  (main@.lr.ph 2 -1 -1 1 1)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 0 0 1 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
0
0
1
0
NEG CEX, INDEX IS 8
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@.lr.ph_1 () Bool)

(assert (not (and true (not (<= main@%i.0.i1_2 0)))))
(assert (and true (not (<= main@%i.0.i1_0 0))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_4<=0)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!(V_4<=0)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!(V_4<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_4<=0))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 0 0 1 0)
  (main@_bb 2 0 0 1)
  (main@.lr.ph 2 -1 -1 1 1)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 0 0 1 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
0
0
1
0
NEG CEX IS: (main@.lr.ph 2 -1 -1 1 1)
ANSWER ARGS:
2
-1
-1
1
1
NEG CEX, INDEX IS 9
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@.lr.ph_1 () Bool)

(assert (not (and true (not (<= main@%i.0.i1_2 0)))))
(assert (and true (not (<= main@%i.0.i1_0 0))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1+PRED_3!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!((V_1+V_3)<=1)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!((V_1+V_3)<=1)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!((V_1+V_3)<=1)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!((V_1+V_3)<=1))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 2 main@.lr.ph_2_0 0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 2 main@.lr.ph_2_0 0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
2
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
0
0
NEG CEX, INDEX IS 10
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@.lr.ph_1 () Bool)

(assert (let ((a!1 (and true (not (<= (+ main@%l.0.i_0 main@%_1_0) 1)))))
  (not a!1)))
(assert (and true (not (<= (+ main@%l.0.i_0 main@%_1_0) 1))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_2+PRED_3!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!((V_2+V_3)<=1)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!((V_2+V_3)<=1)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!((V_2+V_3)<=1)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!((V_2+V_3)<=1))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 2 0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 2 0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
2
0
0
NEG CEX, INDEX IS 11
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@.lr.ph_1 () Bool)

(assert (let ((a!1 (and true (not (<= (+ main@%k.0.i_0 main@%_1_0) 1)))))
  (not a!1)))
(assert (and true (not (<= (+ main@%k.0.i_0 main@%_1_0) 1))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0-PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_0-V_4)<=-1))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&((V_0-V_4)<=-1))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&((V_0-V_4)<=-1))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (main@.lr.ph 1 1 1 2 1)
  (main@_bb 1 1 1 2)
  (main@entry 1)
]
POS OBJ PRED: (main@.lr.ph V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (main@.lr.ph 1 1 1 2 1)
ANSWER ARGS:
1
1
1
2
1
POS CEX, INDEX IS 12
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&((V_0-V_4)<=-1)))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph -1 main@.lr.ph_1_0 main@.lr.ph_2_0 main@.lr.ph_3_0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph -1 main@.lr.ph_1_0 main@.lr.ph_2_0 main@.lr.ph_3_0 0)
ANSWER ARGS:
-1
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
main@.lr.ph_3_0
UNCERTAIN VALUE: main@.lr.ph_3_0
0
NEG CEX, INDEX IS 13
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@.lr.ph_1 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)

(assert (not (and true (<= (- @__VERIFIER_nondet_int_0 main@%i.0.i1_2) (- 1)))))
(assert (and true (<= (- @__VERIFIER_nondet_int_0 main@%i.0.i1_0) (- 1))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_3<=1)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!(V_3<=1)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!(V_3<=1)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_3<=1))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 main@.lr.ph_2_0 2 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 main@.lr.ph_2_0 2 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
2
0
NEG CEX, INDEX IS 14
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@.lr.ph_1 () Bool)
(declare-fun main@%i.0.i1_1 () Int)

(assert (not (and true (not (<= main@%_1_0 1)))))
(assert (and true (not (<= main@%_1_0 1))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1+PRED_3!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!((V_1+V_3)<=2)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!((V_1+V_3)<=2)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!((V_1+V_3)<=2)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!((V_1+V_3)<=2))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 3 main@.lr.ph_2_0 0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 3 main@.lr.ph_2_0 0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
3
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
0
0
NEG CEX, INDEX IS 15
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_1_0 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@.lr.ph_1 () Bool)

(assert (let ((a!1 (and true (not (<= (+ main@%l.0.i_0 main@%_1_0) 2)))))
  (not a!1)))
(assert (and true (not (<= (+ main@%l.0.i_0 main@%_1_0) 2))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_2+PRED_3!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!((V_2+V_3)<=2)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!((V_2+V_3)<=2)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!((V_2+V_3)<=2)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!((V_2+V_3)<=2))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 3 0 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 3 0 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
3
0
0
NEG CEX, INDEX IS 16
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@.lr.ph_1 () Bool)

(assert (let ((a!1 (and true (not (<= (+ main@%k.0.i_0 main@%_1_0) 2)))))
  (not a!1)))
(assert (and true (not (<= (+ main@%k.0.i_0 main@%_1_0) 2))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_3+PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!((V_3+V_4)<=2)))
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : (true&&(!((V_3+V_4)<=2)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!((V_3+V_4)<=2)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!((V_3+V_4)<=2))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 main@.lr.ph_2_0 3 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@.lr.ph main@.lr.ph_0_0 main@.lr.ph_1_0 main@.lr.ph_2_0 3 0)
ANSWER ARGS:
main@.lr.ph_0_0
UNCERTAIN VALUE: main@.lr.ph_0_0
main@.lr.ph_1_0
UNCERTAIN VALUE: main@.lr.ph_1_0
main@.lr.ph_2_0
UNCERTAIN VALUE: main@.lr.ph_2_0
3
0
NEG CEX, INDEX IS 17
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@.lr.ph_1 () Bool)

(assert (let ((a!1 (and true (not (<= (+ main@%_1_0 main@%i.0.i1_2) 2)))))
  (not a!1)))
(assert (and true (not (<= (+ main@%_1_0 main@%i.0.i1_0) 2))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: [&&
  true
  !(V_4<=0)
  !(V_1<=0)
]
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@_bb V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(main@.lr.ph V_0 V_1 V_2 V_3 V_4) : [&&
  true
  !(V_4<=0)
  !(V_1<=0)
]
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@.lr.ph V_0 V_1 V_2 V_3 V_4)&&(![&&
    true
    !(V_4<=0)
    !(V_1<=0)
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@_bb V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@_bb V_0 V_1 V_2 V_3) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@.lr.ph V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  !(V_4<=0)
  !(V_1<=0)
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@_bb
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@.lr.ph
  INT
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_1 main@%k.0.i_1 main@%_1_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0=@__VERIFIER_nondet_int_0
  main@%_4_0<->(main@%_3_0>0)
  main@%_4_0
  main@%_5_0<->(main@%_3_0<0xf4240)
  main@%_5_0
  main@%_6_0<->(main@%_1_0<0xf4240)
  main@%_6_0
  main@_bb_0->(main@_bb_0&&main@entry_0)
  main@_bb_0
  main@%k.0.i_0=1
  main@%l.0.i_0=main@%_3_0
  (main@_bb_0&&main@entry_0)->(main@%k.0.i_1=main@%k.0.i_0)
  (main@_bb_0&&main@entry_0)->(main@%l.0.i_1=main@%l.0.i_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@_bb_0)
  (main@._crit_edge_0&&main@_bb_0)->(!main@%_9_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_1->(main@_bb_1&&main@._crit_edge_0)
  main@_bb_1
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_1&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_1&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_1) <- ((main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0)&&[&&
  true
  main@%_8_0<->(main@%k.0.i_0<main@%_1_0)
  main@%_8_0
  main@%_9_0<->(main@%l.0.i_0<main@%_1_0)
  main@.lr.ph.preheader_0->(main@.lr.ph.preheader_0&&main@_bb_0)
  (main@.lr.ph.preheader_0&&main@_bb_0)->main@%_9_0
  main@.lr.ph_0->(main@.lr.ph_0&&main@.lr.ph.preheader_0)
  main@.lr.ph_0
  main@%i.0.i1_0=main@%l.0.i_0
  (main@.lr.ph_0&&main@.lr.ph.preheader_0)->(main@%i.0.i1_1=main@%i.0.i1_0)
]).
(main@_bb @__VERIFIER_nondet_int_0 main@%l.0.i_2 main@%k.0.i_2 main@%_1_0) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@._crit_edge.loopexit_0->(main@._crit_edge.loopexit_0&&main@_bb1_0)
  (main@._crit_edge.loopexit_0&&main@_bb1_0)->(!main@%_11_0)
  main@._crit_edge_0->(main@._crit_edge_0&&main@._crit_edge.loopexit_0)
  main@%_15_0=@__VERIFIER_nondet_int_0
  main@%not..i_0<->(main@%_16_0!=0)
  main@%_17_0=ite(main@%not..i_0, 1, 0)
  main@%l.0..i_0=(main@%_17_0+main@%l.0.i_0)
  main@%_18_0=(main@%k.0.i_0+1)
  main@_bb_0->(main@_bb_0&&main@._crit_edge_0)
  main@_bb_0
  main@%k.0.i_1=main@%_18_0
  main@%l.0.i_1=main@%l.0..i_0
  (main@_bb_0&&main@._crit_edge_0)->(main@%k.0.i_2=main@%k.0.i_1)
  (main@_bb_0&&main@._crit_edge_0)->(main@%l.0.i_2=main@%l.0.i_1)
]).
(main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_2) <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@_bb1_0->(main@_bb1_0&&main@.lr.ph_0)
  (main@_bb1_0&&main@.lr.ph_0)->(!main@%_13_0)
  main@%_11_0<->(main@%_14_0<main@%_1_0)
  main@.lr.ph_1->(main@.lr.ph_1&&main@_bb1_0)
  main@.lr.ph_1
  (main@.lr.ph_1&&main@_bb1_0)->main@%_11_0
  main@%i.0.i1_1=main@%_14_0
  (main@.lr.ph_1&&main@_bb1_0)->(main@%i.0.i1_2=main@%i.0.i1_1)
]).
main@verifier.error.split <- ((main@.lr.ph @__VERIFIER_nondet_int_0 main@%l.0.i_0 main@%k.0.i_0 main@%_1_0 main@%i.0.i1_0)&&[&&
  true
  main@%_12_0<->(main@%i.0.i1_0>0)
  main@%_13_0<->(main@%_12_0=false)
  main@%_14_0=(main@%i.0.i1_0+1)
  main@verifier.error_0->(main@verifier.error_0&&main@.lr.ph_0)
  (main@verifier.error_0&&main@.lr.ph_0)->main@%_13_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.0.i_2 () Int)
(declare-fun main@%l.0.i_1 () Int)
(declare-fun main@%k.0.i_1 () Int)
(declare-fun main@_bb_1 () Bool)
(declare-fun main@%_18_0 () Int)
(declare-fun main@%l.0..i_0 () Int)
(declare-fun main@%_17_0 () Int)
(declare-fun main@%_16_0 () Int)
(declare-fun main@%not..i_0 () Bool)
(declare-fun main@%l.0.i_2 () Int)
(declare-fun main@%_1_0 () Int)
(declare-fun main@._crit_edge_0 () Bool)
(declare-fun @__VERIFIER_nondet_int_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@%k.0.i_0 () Int)
(declare-fun main@%_9_0 () Bool)
(declare-fun main@_bb_0 () Bool)
(declare-fun main@%_15_0 () Int)

(assert (not (and true (not (<= main@%l.0.i_2 0)))))
(assert (and true (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_8_0 (< main@%k.0.i_0 main@%_1_0))
     main@%_8_0
     (= main@%_9_0 (< main@%l.0.i_0 main@%_1_0))
     (=> main@._crit_edge_0 (and main@._crit_edge_0 main@_bb_0))
     (=> (and main@._crit_edge_0 main@_bb_0) (not main@%_9_0))
     (= main@%_15_0 @__VERIFIER_nondet_int_0)
     (= main@%not..i_0 (not (= main@%_16_0 0)))
     (= main@%_17_0 (ite main@%not..i_0 1 0))
     (= main@%l.0..i_0 (+ main@%_17_0 main@%l.0.i_0))
     (= main@%_18_0 (+ main@%k.0.i_0 1))
     (=> main@_bb_1 (and main@_bb_1 main@._crit_edge_0))
     main@_bb_1
     (= main@%k.0.i_1 main@%_18_0)
     (= main@%l.0.i_1 main@%l.0..i_0)
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%k.0.i_2 main@%k.0.i_1))
     (=> (and main@_bb_1 main@._crit_edge_0) (= main@%l.0.i_2 main@%l.0.i_1))))
(check-sat)
UNSAT
(declare-fun main@%i.0.i1_1 () Int)
(declare-fun main@.lr.ph_1 () Bool)
(declare-fun main@%i.0.i1_2 () Int)
(declare-fun main@%_12_0 () Bool)
(declare-fun main@.lr.ph_0 () Bool)
(declare-fun main@%i.0.i1_0 () Int)
(declare-fun main@%l.0.i_0 () Int)
(declare-fun main@%_13_0 () Bool)
(declare-fun main@%_14_0 () Int)
(declare-fun main@_bb1_0 () Bool)
(declare-fun main@%_11_0 () Bool)
(declare-fun main@%_1_0 () Int)

(assert (not (and true (not (<= main@%i.0.i1_2 0)) (not (<= main@%l.0.i_0 0)))))
(assert (and true (not (<= main@%i.0.i1_0 0)) (not (<= main@%l.0.i_0 0))))
(assert (and true
     true
     (= main@%_12_0 (> main@%i.0.i1_0 0))
     (= main@%_13_0 (= main@%_12_0 false))
     (= main@%_14_0 (+ main@%i.0.i1_0 1))
     (=> main@_bb1_0 (and main@_bb1_0 main@.lr.ph_0))
     (=> (and main@_bb1_0 main@.lr.ph_0) (not main@%_13_0))
     (= main@%_11_0 (< main@%_14_0 main@%_1_0))
     (=> main@.lr.ph_1 (and main@.lr.ph_1 main@_bb1_0))
     main@.lr.ph_1
     (=> (and main@.lr.ph_1 main@_bb1_0) main@%_11_0)
     (= main@%i.0.i1_1 main@%_14_0)
     (=> (and main@.lr.ph_1 main@_bb1_0) (= main@%i.0.i1_2 main@%i.0.i1_1))))
(check-sat)
UNSAT
==================================================================
FINAL INVARIANTS MAP:
REL: (verifier.error V_0 V_1 V_2), CAND: true
REL: (main@entry V_0), CAND: true
REL: (main@_bb V_0 V_1 V_2 V_3), CAND: (true&&(!(V_1<=0)))
REL: (main@.lr.ph V_0 V_1 V_2 V_3 V_4), CAND: [&&
  true
  !(V_4<=0)
  !(V_1<=0)
]
REL: main@verifier.error.split, CAND: false
REL: pos.query.pred, CAND: true
RUN ICE SUCCESSCULLY

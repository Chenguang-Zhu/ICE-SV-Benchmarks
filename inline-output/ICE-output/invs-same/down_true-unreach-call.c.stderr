REL NAME TO C5 NAME MAP:
verifier.error, PRED_0
main@entry, PRED_1
main@__VERIFIER_assert.exit.i, PRED_2
main@verifier.error.split, PRED_3
pos.query.pred, PRED_4
(verifier.error V_0 V_1 V_2)
(main@entry V_0)
(main@__VERIFIER_assert.exit.i V_0 V_1)
main@verifier.error.split
pos.query.pred
DB: 
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((main@__VERIFIER_assert.exit.i V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
(main@verifier.error.split&&(main@entry main@entry_0_0))
NEG CEX IS: main@verifier.error.split
ANSWER ARGS:
NEG CEX, INDEX IS 0
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@__VERIFIER_assert.exit.i V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@__VERIFIER_assert.exit.i 2 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@__VERIFIER_assert.exit.i 2 0)
ANSWER ARGS:
2
0
NEG CEX, INDEX IS 1
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.1.i1_2 () Int)
(declare-fun main@%j.0.i2_2 () Int)
(declare-fun main@%k.1.i1_1 () Int)
(declare-fun main@%_4_0 () Int)
(declare-fun main@%j.0.i2_0 () Int)
(declare-fun main@%_6_0 () Bool)
(declare-fun main@%_5_0 () Int)
(declare-fun main@__VERIFIER_assert.exit.i_0 () Bool)
(declare-fun main@%k.1.i1_0 () Int)
(declare-fun main@%_7_0 () Bool)
(declare-fun main@%j.0.i2_1 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@__VERIFIER_assert.exit.i_1 () Bool)

(assert (not true))
(assert true)
(assert (and true
     true
     (= main@%_4_0 (+ main@%j.0.i2_0 (- 1)))
     (= main@%_5_0 (+ main@%k.1.i1_0 (- 1)))
     (= main@%_6_0 (> main@%j.0.i2_0 1))
     main@%_6_0
     (= main@%_7_0 (> main@%k.1.i1_0 1))
     (= main@%_8_0 (= main@%_7_0 false))
     (=> main@__VERIFIER_assert.exit.i_1
         (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0))
     main@__VERIFIER_assert.exit.i_1
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (not main@%_8_0))
     (= main@%j.0.i2_1 main@%_4_0)
     (= main@%k.1.i1_1 main@%_5_0)
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%j.0.i2_2 main@%j.0.i2_1))
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%k.1.i1_2 main@%k.1.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
NEW CANDIDATE: false
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@__VERIFIER_assert.exit.i V_0 V_1) : false
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((main@__VERIFIER_assert.exit.i V_0 V_1)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (main@__VERIFIER_assert.exit.i 1 1)
  (main@entry 3)
]
POS OBJ PRED: (main@__VERIFIER_assert.exit.i V_0 V_1)
POS CEX IS: (main@__VERIFIER_assert.exit.i 1 1)
ANSWER ARGS:
1
1
POS CEX, INDEX IS 2
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@__VERIFIER_assert.exit.i V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.1.i1_2 () Int)
(declare-fun main@%j.0.i2_2 () Int)
(declare-fun main@%k.1.i1_1 () Int)
(declare-fun main@%_4_0 () Int)
(declare-fun main@%j.0.i2_0 () Int)
(declare-fun main@%_6_0 () Bool)
(declare-fun main@%_5_0 () Int)
(declare-fun main@__VERIFIER_assert.exit.i_0 () Bool)
(declare-fun main@%k.1.i1_0 () Int)
(declare-fun main@%_7_0 () Bool)
(declare-fun main@%j.0.i2_1 () Int)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@__VERIFIER_assert.exit.i_1 () Bool)

(assert (not false))
(assert false)
(assert (and true
     true
     (= main@%_4_0 (+ main@%j.0.i2_0 (- 1)))
     (= main@%_5_0 (+ main@%k.1.i1_0 (- 1)))
     (= main@%_6_0 (> main@%j.0.i2_0 1))
     main@%_6_0
     (= main@%_7_0 (> main@%k.1.i1_0 1))
     (= main@%_8_0 (= main@%_7_0 false))
     (=> main@__VERIFIER_assert.exit.i_1
         (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0))
     main@__VERIFIER_assert.exit.i_1
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (not main@%_8_0))
     (= main@%j.0.i2_1 main@%_4_0)
     (= main@%k.1.i1_1 main@%_5_0)
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%j.0.i2_2 main@%j.0.i2_1))
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%k.1.i1_2 main@%k.1.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@__VERIFIER_assert.exit.i V_0 V_1) : (true&&(!(V_1<=0)))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((main@__VERIFIER_assert.exit.i V_0 V_1)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@__VERIFIER_assert.exit.i V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!(V_1<=0))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@verifier.error.split
  (main@__VERIFIER_assert.exit.i 2 1)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (main@__VERIFIER_assert.exit.i 2 1)
ANSWER ARGS:
2
1
NEG CEX, INDEX IS 3
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%j.0.i2_2 () Int)
(declare-fun main@%k.1.i1_1 () Int)
(declare-fun main@%j.0.i2_1 () Int)
(declare-fun main@%k.1.i1_2 () Int)
(declare-fun main@%k.1.i1_0 () Int)
(declare-fun main@%_4_0 () Int)
(declare-fun main@%j.0.i2_0 () Int)
(declare-fun main@%_6_0 () Bool)
(declare-fun main@%_5_0 () Int)
(declare-fun main@__VERIFIER_assert.exit.i_0 () Bool)
(declare-fun main@%_7_0 () Bool)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@__VERIFIER_assert.exit.i_1 () Bool)

(assert (not (and true (not (<= main@%k.1.i1_2 0)))))
(assert (and true (not (<= main@%k.1.i1_0 0))))
(assert (and true
     true
     (= main@%_4_0 (+ main@%j.0.i2_0 (- 1)))
     (= main@%_5_0 (+ main@%k.1.i1_0 (- 1)))
     (= main@%_6_0 (> main@%j.0.i2_0 1))
     main@%_6_0
     (= main@%_7_0 (> main@%k.1.i1_0 1))
     (= main@%_8_0 (= main@%_7_0 false))
     (=> main@__VERIFIER_assert.exit.i_1
         (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0))
     main@__VERIFIER_assert.exit.i_1
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (not main@%_8_0))
     (= main@%j.0.i2_1 main@%_4_0)
     (= main@%k.1.i1_1 main@%_5_0)
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%j.0.i2_2 main@%j.0.i2_1))
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%k.1.i1_2 main@%k.1.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=1))
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@__VERIFIER_assert.exit.i V_0 V_1) : (true&&(V_0<=1))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((main@__VERIFIER_assert.exit.i V_0 V_1)&&(!(true&&(V_0<=1))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (main@__VERIFIER_assert.exit.i 2 2)
  (main@entry 4)
]
POS OBJ PRED: (main@__VERIFIER_assert.exit.i V_0 V_1)
POS CEX IS: (main@__VERIFIER_assert.exit.i 2 2)
ANSWER ARGS:
2
2
POS CEX, INDEX IS 4
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@__VERIFIER_assert.exit.i V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=1)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.1.i1_2 () Int)
(declare-fun main@%k.1.i1_1 () Int)
(declare-fun main@%j.0.i2_1 () Int)
(declare-fun main@%j.0.i2_2 () Int)
(declare-fun main@%j.0.i2_0 () Int)
(declare-fun main@%_6_0 () Bool)
(declare-fun main@%_4_0 () Int)
(declare-fun main@%_5_0 () Int)
(declare-fun main@__VERIFIER_assert.exit.i_0 () Bool)
(declare-fun main@%k.1.i1_0 () Int)
(declare-fun main@%_7_0 () Bool)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@__VERIFIER_assert.exit.i_1 () Bool)

(assert (not (and true (<= main@%j.0.i2_2 1))))
(assert (and true (<= main@%j.0.i2_0 1)))
(assert (and true
     true
     (= main@%_4_0 (+ main@%j.0.i2_0 (- 1)))
     (= main@%_5_0 (+ main@%k.1.i1_0 (- 1)))
     (= main@%_6_0 (> main@%j.0.i2_0 1))
     main@%_6_0
     (= main@%_7_0 (> main@%k.1.i1_0 1))
     (= main@%_8_0 (= main@%_7_0 false))
     (=> main@__VERIFIER_assert.exit.i_1
         (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0))
     main@__VERIFIER_assert.exit.i_1
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (not main@%_8_0))
     (= main@%j.0.i2_1 main@%_4_0)
     (= main@%k.1.i1_1 main@%_5_0)
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%j.0.i2_2 main@%j.0.i2_1))
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%k.1.i1_2 main@%k.1.i1_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0-PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_0-V_1)<=0))
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(main@entry V_0) : true
(main@__VERIFIER_assert.exit.i V_0 V_1) : (true&&((V_0-V_1)<=0))
main@verifier.error.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((main@__VERIFIER_assert.exit.i V_0 V_1)&&(!(true&&((V_0-V_1)<=0))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@verifier.error.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@__VERIFIER_assert.exit.i V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&((V_0-V_1)<=0)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@__VERIFIER_assert.exit.i
  INT
  INT
  BOOL
]
[fdecl
  main@verifier.error.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(main@entry @__VERIFIER_nondet_int_0) <- true.
(main@__VERIFIER_assert.exit.i main@%j.0.i2_1 main@%k.1.i1_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@__VERIFIER_assert.exit.i.preheader_0->(main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)
  (main@__VERIFIER_assert.exit.i.preheader_0&&main@entry_0)->(!main@%_3_0)
  main@%._0=ite(main@%_2_0, main@%_1_0, 0)
  main@__VERIFIER_assert.exit.i_0->(main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)
  main@__VERIFIER_assert.exit.i_0
  main@%j.0.i2_0=main@%_1_0
  main@%k.1.i1_0=main@%._0
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%j.0.i2_1=main@%j.0.i2_0)
  (main@__VERIFIER_assert.exit.i_0&&main@__VERIFIER_assert.exit.i.preheader_0)->(main@%k.1.i1_1=main@%k.1.i1_0)
]).
main@verifier.error.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  main@%_2_0<->(main@%_1_0>0)
  main@%_2_0
  main@%_3_0<->(main@%_2_0=false)
  main@verifier.error_0->(main@verifier.error_0&&main@entry_0)
  (main@verifier.error_0&&main@entry_0)->main@%_3_0
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
(main@__VERIFIER_assert.exit.i main@%j.0.i2_2 main@%k.1.i1_2) <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@__VERIFIER_assert.exit.i_1->(main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)
  main@__VERIFIER_assert.exit.i_1
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(!main@%_8_0)
  main@%j.0.i2_1=main@%_4_0
  main@%k.1.i1_1=main@%_5_0
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%j.0.i2_2=main@%j.0.i2_1)
  (main@__VERIFIER_assert.exit.i_1&&main@__VERIFIER_assert.exit.i_0)->(main@%k.1.i1_2=main@%k.1.i1_1)
]).
main@verifier.error.split <- ((main@__VERIFIER_assert.exit.i main@%j.0.i2_0 main@%k.1.i1_0)&&[&&
  true
  main@%_4_0=(main@%j.0.i2_0+-1)
  main@%_5_0=(main@%k.1.i1_0+-1)
  main@%_6_0<->(main@%j.0.i2_0>1)
  main@%_6_0
  main@%_7_0<->(main@%k.1.i1_0>1)
  main@%_8_0<->(main@%_7_0=false)
  main@verifier.error.loopexit_0->(main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)
  (main@verifier.error.loopexit_0&&main@__VERIFIER_assert.exit.i_0)->main@%_8_0
  main@verifier.error_0->(main@verifier.error_0&&main@verifier.error.loopexit_0)
  main@verifier.error.split_0->(main@verifier.error.split_0&&main@verifier.error_0)
  main@verifier.error.split_0
]).
Queries:
;main@verifier.error.split
=========================== IMPL START ============================
(declare-fun main@%k.1.i1_1 () Int)
(declare-fun main@%j.0.i2_1 () Int)
(declare-fun main@__VERIFIER_assert.exit.i_0 () Bool)
(declare-fun main@%j.0.i2_2 () Int)
(declare-fun main@%k.1.i1_2 () Int)
(declare-fun main@%j.0.i2_0 () Int)
(declare-fun main@%_6_0 () Bool)
(declare-fun main@%k.1.i1_0 () Int)
(declare-fun main@%_4_0 () Int)
(declare-fun main@%_5_0 () Int)
(declare-fun main@%_7_0 () Bool)
(declare-fun main@%_8_0 () Bool)
(declare-fun main@__VERIFIER_assert.exit.i_1 () Bool)

(assert (not (and true (<= (- main@%j.0.i2_2 main@%k.1.i1_2) 0))))
(assert (and true (<= (- main@%j.0.i2_0 main@%k.1.i1_0) 0)))
(assert (and true
     true
     (= main@%_4_0 (+ main@%j.0.i2_0 (- 1)))
     (= main@%_5_0 (+ main@%k.1.i1_0 (- 1)))
     (= main@%_6_0 (> main@%j.0.i2_0 1))
     main@%_6_0
     (= main@%_7_0 (> main@%k.1.i1_0 1))
     (= main@%_8_0 (= main@%_7_0 false))
     (=> main@__VERIFIER_assert.exit.i_1
         (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0))
     main@__VERIFIER_assert.exit.i_1
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (not main@%_8_0))
     (= main@%j.0.i2_1 main@%_4_0)
     (= main@%k.1.i1_1 main@%_5_0)
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%j.0.i2_2 main@%j.0.i2_1))
     (=> (and main@__VERIFIER_assert.exit.i_1 main@__VERIFIER_assert.exit.i_0)
         (= main@%k.1.i1_2 main@%k.1.i1_1))))
(check-sat)
UNSAT
==================================================================
FINAL INVARIANTS MAP:
REL: (verifier.error V_0 V_1 V_2), CAND: true
REL: (main@entry V_0), CAND: true
REL: (main@__VERIFIER_assert.exit.i V_0 V_1), CAND: (true&&((V_0-V_1)<=0))
REL: main@verifier.error.split, CAND: false
REL: pos.query.pred, CAND: true
RUN ICE SUCCESSCULLY

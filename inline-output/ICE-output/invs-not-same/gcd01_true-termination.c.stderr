REL NAME TO C5 NAME MAP:
verifier.error, PRED_0
gcd@_tail, PRED_1
gcd@.lr.ph..lr.ph.split_crit_edge, PRED_2
gcd@_y2.tr3, PRED_3
gcd@tailrecurse.outer._crit_edge.split, PRED_4
gcd, PRED_5
main@entry, PRED_6
main@entry.split, PRED_7
pos.query.pred, PRED_8
(verifier.error V_0 V_1 V_2)
(gcd@_tail V_0 V_1)
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)
(gcd@_y2.tr3 V_0 V_1 V_2 V_3)
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
(gcd V_0 V_1 V_2 V_3 V_4 V_5)
main@entry
main@entry.split
pos.query.pred
DB: 
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
(main@entry.split&&main@entry)
NEG CEX IS: main@entry.split
ANSWER ARGS:
NEG CEX, INDEX IS 0
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  (gcd@_y2.tr3 0 -1 1 1)
  main@entry
]
NEG CEX IS: (gcd@_y2.tr3 0 -1 1 1)
ANSWER ARGS:
0
-1
1
1
NEG CEX, INDEX IS 1
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  (gcd@_y2.tr3 0 -1 1 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 0 -1 1 1)
  main@entry
]
NEG CEX IS: (gcd@.lr.ph..lr.ph.split_crit_edge 0 -1 1 1)
ANSWER ARGS:
0
-1
1
1
NEG CEX, INDEX IS 2
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  main@entry
]
NEG CEX IS: (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
ANSWER ARGS:
0
1
1
NEG CEX, INDEX IS 3
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  main@entry
]
NEG CEX IS: (gcd true false false 1 1 0)
ANSWER ARGS:
true
false
false
1
1
0
NEG CEX, INDEX IS 4
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)
(declare-fun gcd@_y2.tr3_1 () Bool)

(assert (not true))
(assert true)
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
NEW CANDIDATE: false
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: false
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : false
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : false
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : false
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : false
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@_y2.tr3 1 1 1 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 1 1 1)
  (gcd@_tail 1 1)
]
POS OBJ PRED: (gcd@_y2.tr3 V_0 V_1 V_2 V_3)
POS CEX IS: (gcd@_y2.tr3 1 1 1 1)
ANSWER ARGS:
1
1
1
1
POS CEX, INDEX IS 5
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 1 1 1)
  (gcd@_tail 1 1)
]
POS OBJ PRED: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)
POS CEX IS: (gcd@.lr.ph..lr.ph.split_crit_edge 1 1 1 1)
ANSWER ARGS:
1
1
1
1
POS CEX, INDEX IS 6
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 0 0 0)
  (gcd@_tail 0 0)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 0 0 0)
ANSWER ARGS:
0
0
0
POS CEX, INDEX IS 7
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false gcd_3_0 gcd_4_0 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false gcd_3_0 gcd_4_0 gcd_5_0)
ANSWER ARGS:
false
false
false
gcd_3_0
UNCERTAIN VALUE: gcd_3_0
gcd_4_0
UNCERTAIN VALUE: gcd_4_0
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 8
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&false)
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&false)
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&false)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&false)
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)
(declare-fun gcd@_y2.tr3_1 () Bool)

(assert (not false))
(assert false)
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=-1)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=-1)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_1<=0))
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!V_0))
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=-1)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=-1)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : (true&&(V_1<=0))
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : (true&&(!V_0))
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=-1)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=-1)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!(true&&(V_1<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 0 1 0)
  (gcd@_tail 1 0)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 0 1 0)
ANSWER ARGS:
0
1
0
POS CEX, INDEX IS 9
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!(true&&(!V_0))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd true true true gcd_3_0 gcd_4_0 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true true true gcd_3_0 gcd_4_0 gcd_5_0)
ANSWER ARGS:
true
true
true
gcd_3_0
UNCERTAIN VALUE: gcd_3_0
gcd_4_0
UNCERTAIN VALUE: gcd_4_0
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 10
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=-1))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  (gcd@_y2.tr3 1 0 1 1)
  main@entry
]
NEG CEX IS: (gcd@_y2.tr3 1 0 1 1)
ANSWER ARGS:
1
0
1
1
NEG CEX, INDEX IS 11
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=-1))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  (gcd@_y2.tr3 1 0 1 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 0 1 1)
  main@entry
]
NEG CEX IS: (gcd@.lr.ph..lr.ph.split_crit_edge 1 0 1 1)
ANSWER ARGS:
1
0
1
1
NEG CEX, INDEX IS 12
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&(true&&(V_1<=0)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&(true&&(!V_0)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 (- 1))))))
(assert (and true (not (<= gcd@%y2.tr3_0 (- 1)))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0-PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_0-V_1)<=0))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0-PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_0-V_1)<=0))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_2<=0))
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_3<=0))
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&((V_0-V_1)<=0))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&((V_0-V_1)<=0))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : (true&&(V_2<=0))
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : (true&&(V_3<=0))
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&((V_0-V_1)<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@.lr.ph..lr.ph.split_crit_edge 2 1 1 2)
  (gcd@_tail 1 2)
]
POS OBJ PRED: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)
POS CEX IS: (gcd@.lr.ph..lr.ph.split_crit_edge 2 1 1 2)
ANSWER ARGS:
2
1
1
2
POS CEX, INDEX IS 13
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&((V_0-V_1)<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@_y2.tr3 2 1 1 2)
  (gcd@.lr.ph..lr.ph.split_crit_edge 2 1 1 2)
  (gcd@_tail 1 2)
]
POS OBJ PRED: (gcd@_y2.tr3 V_0 V_1 V_2 V_3)
POS CEX IS: (gcd@_y2.tr3 2 1 1 2)
ANSWER ARGS:
2
1
1
2
POS CEX, INDEX IS 14
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!(true&&(V_2<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 0 0 1)
  (gcd@_tail 0 1)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 0 0 1)
ANSWER ARGS:
0
0
1
POS CEX, INDEX IS 15
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!(true&&(V_3<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false 1 gcd_4_0 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false 1 gcd_4_0 gcd_5_0)
ANSWER ARGS:
false
false
false
1
gcd_4_0
UNCERTAIN VALUE: gcd_4_0
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 16
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&((V_0-V_1)<=0)))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  (gcd@_y2.tr3 0 0 1 1)
  main@entry
]
NEG CEX IS: (gcd@_y2.tr3 0 0 1 1)
ANSWER ARGS:
0
0
1
1
NEG CEX, INDEX IS 17
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&((V_0-V_1)<=0)))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 1)
  (gcd@_y2.tr3 0 0 1 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 0 0 1 1)
  main@entry
]
NEG CEX IS: (gcd@.lr.ph..lr.ph.split_crit_edge 0 0 1 1)
ANSWER ARGS:
0
0
1
1
NEG CEX, INDEX IS 18
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&(true&&(V_2<=0)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&(true&&(V_3<=0)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (<= (- gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2) 0))))
(assert (and true (<= (- gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0) 0)))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
SAT, NEED TO ADD IMPLICATION DATA PAIR
(2,3,gcd@%y2_0,gcd@%y1_0,) -> (2,1,gcd@%y2_0,gcd@%y1_0,)
UNCERTAIN VALUE: gcd@%y2_0
UNCERTAIN VALUE: gcd@%y1_0
UNCERTAIN VALUE: gcd@%y2_0
UNCERTAIN VALUE: gcd@%y1_0
IMPL CEX, INDEX IS 19
IMPL CEX, INDEX IS 20
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1+PRED_4!V_2
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_1+V_2)<=1))
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=0))
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : (true&&((V_1+V_2)<=1))
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : (true&&(V_4<=0))
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!(true&&((V_1+V_2)<=1))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 0 0 2)
  (gcd@_tail 0 2)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 0 0 2)
ANSWER ARGS:
0
0
2
POS CEX, INDEX IS 21
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!(true&&(V_4<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false gcd_3_0 1 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false gcd_3_0 1 gcd_5_0)
ANSWER ARGS:
false
false
false
gcd_3_0
UNCERTAIN VALUE: gcd_3_0
1
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 22
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&(true&&((V_1+V_2)<=1)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&(true&&(V_4<=0)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(V_1<=0))||[&&
  true
  !(V_1<=0)
  V_2<=0
])
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3+PRED_5!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_3+V_4)<=1))
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : ((true&&(V_1<=0))||[&&
  true
  !(V_1<=0)
  V_2<=0
])
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : (true&&((V_3+V_4)<=1))
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!((true&&(V_1<=0))||[&&
    true
    !(V_1<=0)
    V_2<=0
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 2 2 2)
  (gcd@_y2.tr3 2 2 2 2)
  (gcd@.lr.ph..lr.ph.split_crit_edge 2 2 2 2)
  (gcd@_tail 2 2)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 2 2 2)
ANSWER ARGS:
2
2
2
POS CEX, INDEX IS 23
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!(true&&((V_3+V_4)<=1))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false 2 0 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false 2 0 gcd_5_0)
ANSWER ARGS:
false
false
false
2
0
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 24
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&((true&&(V_1<=0))||[&&
  true
  !(V_1<=0)
  V_2<=0
]))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&(true&&((V_3+V_4)<=1)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0-PRED_4!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: ([&&
  true
  (V_0-V_1)<=-1
  V_2<=0
]||(true&&(!((V_0-V_1)<=-1))))
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(!V_0))||[&&
  true
  !(!V_0)
  !(!V_1)
])
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : ([&&
  true
  (V_0-V_1)<=-1
  V_2<=0
]||(true&&(!((V_0-V_1)<=-1))))
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : ((true&&(!V_0))||[&&
  true
  !(!V_0)
  !(!V_1)
])
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!([&&
    true
    (V_0-V_1)<=-1
    V_2<=0
  ]||(true&&(!((V_0-V_1)<=-1))))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 1 2 1)
  (gcd@_y2.tr3 1 1 2 1)
  (gcd@_y2.tr3 1 2 2 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 2 2 1)
  (gcd@_tail 2 1)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 1 2 1)
ANSWER ARGS:
1
2
1
POS CEX, INDEX IS 25
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!((true&&(!V_0))||[&&
    true
    !(!V_0)
    !(!V_1)
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 0 0 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 0 0)
  (gcd@_tail 0 0)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 0 0 0)
ANSWER ARGS:
true
false
false
0
0
0
POS CEX, INDEX IS 26
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&([&&
  true
  (V_0-V_1)<=-1
  V_2<=0
]||(true&&(!((V_0-V_1)<=-1)))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&((true&&(!V_0))||[&&
  true
  !(!V_0)
  !(!V_1)
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0-PRED_4!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0-PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: ([&&
  true
  (V_0-V_1)<=-1
  !((V_0-V_2)<=-1)
]||(true&&(!((V_0-V_1)<=-1))))
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(V_4<=0))||[&&
  true
  !(V_4<=0)
  !V_0
])
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : ([&&
  true
  (V_0-V_1)<=-1
  !((V_0-V_2)<=-1)
]||(true&&(!((V_0-V_1)<=-1))))
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : ((true&&(V_4<=0))||[&&
  true
  !(V_4<=0)
  !V_0
])
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!([&&
    true
    (V_0-V_1)<=-1
    !((V_0-V_2)<=-1)
  ]||(true&&(!((V_0-V_1)<=-1))))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 1 3 2)
  (gcd@_y2.tr3 1 1 3 2)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 1 3 2)
  (gcd@_y2.tr3 2 1 3 2)
  (gcd@_y2.tr3 2 3 3 2)
  (gcd@.lr.ph..lr.ph.split_crit_edge 2 3 3 2)
  (gcd@_tail 3 2)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 1 3 2)
ANSWER ARGS:
1
3
2
POS CEX, INDEX IS 27
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!((true&&(V_4<=0))||[&&
    true
    !(V_4<=0)
    !V_0
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd true true true gcd_3_0 1 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true true true gcd_3_0 1 gcd_5_0)
ANSWER ARGS:
true
true
true
gcd_3_0
UNCERTAIN VALUE: gcd_3_0
1
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 28
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&([&&
  true
  (V_0-V_1)<=-1
  !((V_0-V_2)<=-1)
]||(true&&(!((V_0-V_1)<=-1)))))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&((true&&(V_4<=0))||[&&
  true
  !(V_4<=0)
  !V_0
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0-PRED_4!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1-PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: ([&&
  true
  (V_0-V_1)<=-1
  !((V_1-V_2)<=0)
]||(true&&(!((V_0-V_1)<=-1))))
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(V_4<=0))||[&&
  true
  !(V_4<=0)
  V_3<=0
])
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : ([&&
  true
  (V_0-V_1)<=-1
  !((V_1-V_2)<=0)
]||(true&&(!((V_0-V_1)<=-1))))
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : ((true&&(V_4<=0))||[&&
  true
  !(V_4<=0)
  V_3<=0
])
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(!([&&
    true
    (V_0-V_1)<=-1
    !((V_1-V_2)<=0)
  ]||(true&&(!((V_0-V_1)<=-1))))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd@tailrecurse.outer._crit_edge.split 1 2 3)
  (gcd@_y2.tr3 1 1 2 3)
  (gcd@_y2.tr3 1 2 2 3)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 2 2 3)
  (gcd@_y2.tr3 3 2 2 3)
  (gcd@.lr.ph..lr.ph.split_crit_edge 3 2 2 3)
  (gcd@_tail 2 3)
]
POS OBJ PRED: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)
POS CEX IS: (gcd@tailrecurse.outer._crit_edge.split 1 2 3)
ANSWER ARGS:
1
2
3
POS CEX, INDEX IS 29
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!((true&&(V_4<=0))||[&&
    true
    !(V_4<=0)
    V_3<=0
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false 1 1 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false 1 1 gcd_5_0)
ANSWER ARGS:
false
false
false
1
1
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 30
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&([&&
  true
  (V_0-V_1)<=-1
  !((V_1-V_2)<=0)
]||(true&&(!((V_0-V_1)<=-1)))))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 2 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 2 1)
  main@entry
]
NEG CEX IS: (gcd@tailrecurse.outer._crit_edge.split 0 2 1)
ANSWER ARGS:
0
2
1
NEG CEX, INDEX IS 31
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&((true&&(V_4<=0))||[&&
  true
  !(V_4<=0)
  V_3<=0
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_3<=0
])
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_3<=0
])
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!((true&&(!V_0))||[&&
    true
    !(!V_0)
    V_3<=0
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd true true true 1 gcd_4_0 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true true true 1 gcd_4_0 gcd_5_0)
ANSWER ARGS:
true
true
true
1
gcd_4_0
UNCERTAIN VALUE: gcd_4_0
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 32
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_3<=0
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    !V_0
  ]
  [&&
    true
    !(V_4<=0)
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    !V_0
  ]
  [&&
    true
    !(V_4<=0)
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(V_4<=0)
    [&&
      true
      !(V_4<=0)
      !V_0
    ]
    [&&
      true
      !(V_4<=0)
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 0 1 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 1 0)
  (gcd@_tail 1 0)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 0 1 0)
ANSWER ARGS:
true
false
false
0
1
0
POS CEX, INDEX IS 33
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    !V_0
  ]
  [&&
    true
    !(V_4<=0)
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3+PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&((V_3+V_4)<=1))||[&&
  true
  !((V_3+V_4)<=1)
  !V_0
])
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : ((true&&((V_3+V_4)<=1))||[&&
  true
  !((V_3+V_4)<=1)
  !V_0
])
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(!((true&&((V_3+V_4)<=1))||[&&
    true
    !((V_3+V_4)<=1)
    !V_0
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd true true true 2 0 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true true true 2 0 gcd_5_0)
ANSWER ARGS:
true
true
true
2
0
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 34
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&((true&&((V_3+V_4)<=1))||[&&
  true
  !((V_3+V_4)<=1)
  !V_0
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !V_0
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !V_0
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(V_4<=0)
    [&&
      true
      !(V_4<=0)
      V_3<=0
    ]
    [&&
      true
      !(V_4<=0)
      !(V_3<=0)
      !V_0
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd true true true 1 1 gcd_5_0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true true true 1 1 gcd_5_0)
ANSWER ARGS:
true
true
true
1
1
gcd_5_0
UNCERTAIN VALUE: gcd_5_0
POS CEX, INDEX IS 35
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !V_0
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !V_0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !V_0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(V_4<=0)
    [&&
      true
      !(V_4<=0)
      V_3<=0
    ]
    [&&
      true
      !(V_4<=0)
      !(V_3<=0)
      !V_0
    ]
    [&&
      true
      !(V_4<=0)
      !(V_3<=0)
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 1 1 1)
  (gcd@tailrecurse.outer._crit_edge.split 1 1 1)
  (gcd@_y2.tr3 1 1 1 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 1 1 1)
  (gcd@_tail 1 1)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 1 1 1)
ANSWER ARGS:
true
false
false
1
1
1
POS CEX, INDEX IS 36
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(V_4<=0)
  [&&
    true
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !V_0
  ]
  [&&
    true
    !(V_4<=0)
    !(V_3<=0)
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&((V_4-V_5)<=0)
  [&&
    true
    !((V_4-V_5)<=0)
    V_3<=0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !(V_3<=0)
    !V_0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !(V_3<=0)
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&((V_4-V_5)<=0)
  [&&
    true
    !((V_4-V_5)<=0)
    V_3<=0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !(V_3<=0)
    !V_0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !(V_3<=0)
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&((V_4-V_5)<=0)
    [&&
      true
      !((V_4-V_5)<=0)
      V_3<=0
    ]
    [&&
      true
      !((V_4-V_5)<=0)
      !(V_3<=0)
      !V_0
    ]
    [&&
      true
      !((V_4-V_5)<=0)
      !(V_3<=0)
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 1 2 1)
  (gcd@tailrecurse.outer._crit_edge.split 1 2 1)
  (gcd@_y2.tr3 1 1 2 1)
  (gcd@_y2.tr3 1 2 2 1)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 2 2 1)
  (gcd@_tail 2 1)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 1 2 1)
ANSWER ARGS:
true
false
false
1
2
1
POS CEX, INDEX IS 37
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&((V_4-V_5)<=0)
  [&&
    true
    !((V_4-V_5)<=0)
    V_3<=0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !(V_3<=0)
    !V_0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !(V_3<=0)
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3-PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&((V_4-V_5)<=0)
  [&&
    true
    !((V_4-V_5)<=0)
    (V_3-V_4)<=-1
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !((V_3-V_4)<=-1)
    !V_0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !((V_3-V_4)<=-1)
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&((V_4-V_5)<=0)
  [&&
    true
    !((V_4-V_5)<=0)
    (V_3-V_4)<=-1
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !((V_3-V_4)<=-1)
    !V_0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !((V_3-V_4)<=-1)
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&((V_4-V_5)<=0)
    [&&
      true
      !((V_4-V_5)<=0)
      (V_3-V_4)<=-1
    ]
    [&&
      true
      !((V_4-V_5)<=0)
      !((V_3-V_4)<=-1)
      !V_0
    ]
    [&&
      true
      !((V_4-V_5)<=0)
      !((V_3-V_4)<=-1)
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 3 2 1)
  (gcd@tailrecurse.outer._crit_edge.split 1 2 3)
  (gcd@_y2.tr3 1 1 2 3)
  (gcd@_y2.tr3 1 2 2 3)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 2 2 3)
  (gcd@_y2.tr3 3 2 2 3)
  (gcd@.lr.ph..lr.ph.split_crit_edge 3 2 2 3)
  (gcd@_tail 2 3)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 3 2 1)
ANSWER ARGS:
true
false
false
3
2
1
POS CEX, INDEX IS 38
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&((V_4-V_5)<=0)
  [&&
    true
    !((V_4-V_5)<=0)
    (V_3-V_4)<=-1
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !((V_3-V_4)<=-1)
    !V_0
  ]
  [&&
    true
    !((V_4-V_5)<=0)
    !((V_3-V_4)<=-1)
    !(!V_0)
    !(!V_1)
  ]
])
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 1 2 0)
  main@entry
]
NEG CEX IS: (gcd true false false 1 2 0)
ANSWER ARGS:
true
false
false
1
2
0
NEG CEX, INDEX IS 39
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !V_0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  [&&
    true
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !V_0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    [&&
      true
      (V_4-V_5)<=1
      (V_4-V_5)<=0
    ]
    [&&
      true
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !V_0
    ]
    [&&
      true
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !(!V_0)
      !V_1
      V_5<=0
      V_3<=0
    ]
    [&&
      true
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !(!V_0)
      !V_1
      !(V_5<=0)
    ]
    [&&
      true
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false gcd_3_0 2 0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false gcd_3_0 2 0)
ANSWER ARGS:
false
false
false
gcd_3_0
UNCERTAIN VALUE: gcd_3_0
2
0
POS CEX, INDEX IS 40
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  [&&
    true
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !V_0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !V_1
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !V_1
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      (V_4-V_5)<=1
      !V_1
      V_5<=0
      V_3<=0
    ]
    [&&
      true
      !(!V_0)
      (V_4-V_5)<=1
      !V_1
      !(V_5<=0)
    ]
    [&&
      true
      !(!V_0)
      (V_4-V_5)<=1
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd true true true gcd_3_0 2 0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true true true gcd_3_0 2 0)
ANSWER ARGS:
true
true
true
gcd_3_0
UNCERTAIN VALUE: gcd_3_0
2
0
POS CEX, INDEX IS 41
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !V_1
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    (V_4-V_5)<=1
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&((V_3-V_5)<=0)
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !V_0
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&((V_3-V_5)<=0)
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !V_0
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&((V_3-V_5)<=0)
    [&&
      true
      !((V_3-V_5)<=0)
      (V_4-V_5)<=1
      (V_4-V_5)<=0
    ]
    [&&
      true
      !((V_3-V_5)<=0)
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !V_0
    ]
    [&&
      true
      !((V_3-V_5)<=0)
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !(!V_0)
      !V_1
      !(V_5<=0)
    ]
    [&&
      true
      !((V_3-V_5)<=0)
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(gcd false false false 1 2 0))
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd false false false 1 2 0)
ANSWER ARGS:
false
false
false
1
2
0
POS CEX, INDEX IS 42
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&((V_3-V_5)<=0)
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !V_0
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !((V_3-V_5)<=0)
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_3-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !((V_3-V_5)<=0)
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_3-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !((V_3-V_5)<=0)
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      (V_3-V_5)<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      !((V_3-V_5)<=0)
      !(V_5<=0)
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 1 0 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 0 1)
  (gcd@_tail 0 1)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 1 0 0)
ANSWER ARGS:
true
false
false
1
0
0
POS CEX, INDEX IS 43
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_3-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !((V_3-V_5)<=0)
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3+PRED_5!V_4
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    V_5<=0
    (V_3+V_4)<=1
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    V_5<=0
    (V_3+V_4)<=1
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      (V_4-V_5)<=1
      V_5<=0
      (V_3+V_4)<=1
    ]
    [&&
      true
      !(!V_0)
      !V_1
      (V_4-V_5)<=1
      !(V_5<=0)
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 2 0 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 0 2)
  (gcd@_tail 0 2)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 2 0 0)
ANSWER ARGS:
true
false
false
2
0
0
POS CEX, INDEX IS 44
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    V_5<=0
    (V_3+V_4)<=1
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      (V_4-V_5)<=1
      (V_4-V_5)<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      V_5<=0
      V_3<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      (V_4-V_5)<=1
      !((V_4-V_5)<=0)
      !(V_5<=0)
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 0 2 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 2 0)
  (gcd@_tail 2 0)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 0 2 0)
ANSWER ARGS:
true
false
false
0
2
0
POS CEX, INDEX IS 45
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    (V_4-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    V_5<=0
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    (V_4-V_5)<=1
    !((V_4-V_5)<=0)
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3-PRED_5!V_5
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3-PRED_5!V_4
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_3-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !((V_3-V_5)<=0)
    !((V_3-V_4)<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_3-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !((V_3-V_5)<=0)
    !((V_3-V_4)<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      (V_3-V_5)<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      !((V_3-V_5)<=0)
      !((V_3-V_4)<=0)
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 2 3 1)
  (gcd@tailrecurse.outer._crit_edge.split 1 3 2)
  (gcd@_y2.tr3 1 1 3 2)
  (gcd@.lr.ph..lr.ph.split_crit_edge 1 1 3 2)
  (gcd@_y2.tr3 2 1 3 2)
  (gcd@_y2.tr3 2 3 3 2)
  (gcd@.lr.ph..lr.ph.split_crit_edge 2 3 3 2)
  (gcd@_tail 3 2)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 2 3 1)
ANSWER ARGS:
true
false
false
2
3
1
POS CEX, INDEX IS 46
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    (V_3-V_5)<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !((V_3-V_5)<=0)
    !((V_3-V_4)<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  main@entry
  (gcd true false false 2 1 0)
  main@entry
]
NEG CEX IS: (gcd true false false 2 1 0)
ANSWER ARGS:
true
false
false
2
1
0
NEG CEX, INDEX IS 47
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3+PRED_5!V_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    (V_3+V_4)<=2
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    (V_3+V_4)<=2
    !(V_3<=0)
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    (V_3+V_4)<=2
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    (V_3+V_4)<=2
    !(V_3<=0)
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      V_5<=0
      (V_3+V_4)<=2
      V_3<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      V_5<=0
      (V_3+V_4)<=2
      !(V_3<=0)
      V_4<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      !(V_5<=0)
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (gcd true false false 3 0 0)
  (gcd@tailrecurse.outer._crit_edge.split 0 0 3)
  (gcd@_tail 0 3)
]
POS OBJ PRED: (gcd V_0 V_1 V_2 V_3 V_4 V_5)
POS CEX IS: (gcd true false false 3 0 0)
ANSWER ARGS:
true
false
false
3
0
0
POS CEX, INDEX IS 48
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    (V_3+V_4)<=2
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    (V_3+V_4)<=2
    !(V_3<=0)
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!(V_1<=0)))
TAG: PRED_4
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_0
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_1
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_4!V_2
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
TAG: PRED_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_5
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_4
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_5!V_3
LEAF NODE
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_6
NEW CANDIDATE: true
TAG: PRED_7
NEW CANDIDATE: false
TAG: PRED_8
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(gcd@_tail V_0 V_1) : true
(gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@_y2.tr3 V_0 V_1 V_2 V_3) : (true&&(!(V_1<=0)))
(gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) : [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
(gcd V_0 V_1 V_2 V_3 V_4 V_5) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
main@entry : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: main@entry
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((gcd@_tail V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@_y2.tr3 V_0 V_1 V_2 V_3)&&(!(true&&(!(V_1<=0)))))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2)&&(![||
    [&&
      true
      V_0<=0
      V_1<=0
    ]
    [&&
      true
      V_0<=0
      !(V_1<=0)
      V_2<=0
    ]
    true&&(!(V_0<=0))
  ]))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((gcd V_0 V_1 V_2 V_3 V_4 V_5)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      V_5<=0
      V_4<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      V_5<=0
      !(V_4<=0)
      V_3<=0
    ]
    [&&
      true
      !(!V_0)
      !V_1
      !(V_5<=0)
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (gcd@_tail V_0 V_1) <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry.split <- (main@entry&&false)
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry&&true)
UNSAT
VERIFY RULE: main@entry <- true
UNSAT
VERIFY RULE: (gcd@_y2.tr3 V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3) <- (main@entry&&(true&&(!(V_1<=0))))
UNSAT
VERIFY RULE: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2) <- (main@entry&&[||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
])
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- (main@entry&&true)
UNSAT
VERIFY RULE: (gcd V_0 V_1 V_2 V_3 V_4 V_5) <- (main@entry&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  gcd@_tail
  INT
  INT
  BOOL
]
[fdecl
  gcd@.lr.ph..lr.ph.split_crit_edge
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@_y2.tr3
  INT
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd@tailrecurse.outer._crit_edge.split
  INT
  INT
  INT
  BOOL
]
[fdecl
  gcd
  BOOL
  BOOL
  BOOL
  INT
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(gcd true true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false true true gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd false false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- true.
(gcd@_tail gcd@%y2_0 gcd@%y1_0) <- true.
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_1 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0->(gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0&&gcd@_tail_0)->(!gcd@%or.cond26_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  gcd@%y2.tr.ph9_0=gcd@%y2_0
  gcd@%y1.tr.ph7_0=gcd@%y1_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@.lr.ph..lr.ph.split_crit_edge.preheader_0)->(gcd@%y1.tr.ph7_1=gcd@%y1.tr.ph7_0)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_tail gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_2_0<->(gcd@%y1_0<1)
  gcd@%_or.cond26_0<->(gcd@%y2_0<1)
  gcd@%or.cond26_0<->(gcd@%_2_0||gcd@%_or.cond26_0)
  gcd@tailrecurse.outer._crit_edge_0->(gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->gcd@%or.cond26_0
  gcd@%.0_0=0
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@_tail_0)->(gcd@%.0_1=gcd@%.0_0)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_0 gcd@%y2.tr.ph9_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@_y2.tr3_0->(gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)
  gcd@_y2.tr3_0
  gcd@%y2.tr3_0=gcd@%y2.tr.ph9_0
  (gcd@_y2.tr3_0&&gcd@.lr.ph..lr.ph.split_crit_edge_0)->(gcd@%y2.tr3_1=gcd@%y2.tr3_0)
]).
(gcd@.lr.ph..lr.ph.split_crit_edge gcd@%y1.tr.ph7_2 gcd@%y2.tr.ph9_1 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0->(gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)
  gcd@.lr.ph..lr.ph.split_crit_edge_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(!gcd@%or.cond2_0)
  gcd@%y2.tr.ph9_0=gcd@%y2.tr3.lcssa23_1
  gcd@%y1.tr.ph7_1=gcd@%_tail3_0
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y2.tr.ph9_1=gcd@%y2.tr.ph9_0)
  (gcd@.lr.ph..lr.ph.split_crit_edge_0&&gcd@tailrecurse.outer_0)->(gcd@%y1.tr.ph7_2=gcd@%y1.tr.ph7_1)
]).
(gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@_y2.tr3_1->(gcd@_y2.tr3_1&&gcd@tailrecurse_0)
  gcd@_y2.tr3_1
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(!gcd@%_br_0)
  gcd@%y2.tr3_1=gcd@%_br2_0
  (gcd@_y2.tr3_1&&gcd@tailrecurse_0)->(gcd@%y2.tr3_2=gcd@%y2.tr3_1)
]).
(gcd@tailrecurse.outer._crit_edge.split gcd@%.0_2 gcd@%y2_0 gcd@%y1_0) <- ((gcd@_y2.tr3 gcd@%y1.tr.ph7_0 gcd@%y2.tr3_0 gcd@%y2_0 gcd@%y1_0)&&[&&
  true
  gcd@%_br1_0<->(gcd@%y2.tr3_0=gcd@%y1.tr.ph7_0)
  gcd@_7_0->(gcd@_7_0&&gcd@_y2.tr3_0)
  (gcd@_7_0&&gcd@_y2.tr3_0)->(!gcd@%_br1_0)
  gcd@%_8_0<->(gcd@%y2.tr3_0<gcd@%y1.tr.ph7_0)
  gcd@%_br2_0=(gcd@%y2.tr3_0-gcd@%y1.tr.ph7_0)
  gcd@tailrecurse_0->(gcd@tailrecurse_0&&gcd@_7_0)
  (gcd@tailrecurse_0&&gcd@_7_0)->(!gcd@%_8_0)
  gcd@%_br_0<->(gcd@%_br2_0<1)
  gcd@tailrecurse.outer_0->(gcd@tailrecurse.outer_0&&gcd@_7_0)
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->gcd@%_8_0
  gcd@%y2.tr3.lcssa23_0=gcd@%y2.tr3_0
  (gcd@tailrecurse.outer_0&&gcd@_7_0)->(gcd@%y2.tr3.lcssa23_1=gcd@%y2.tr3.lcssa23_0)
  gcd@%_tail3_0=(gcd@%y1.tr.ph7_0-gcd@%y2.tr3.lcssa23_1)
  gcd@%_11_0<->(gcd@%_tail3_0<1)
  gcd@%_or.cond2_0<->(gcd@%y2.tr3.lcssa23_1<1)
  gcd@%or.cond2_0<->(gcd@%_11_0||gcd@%_or.cond2_0)
  gcd@tailrecurse.outer._crit_edge.loopexit22_0->(gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)
  (gcd@tailrecurse.outer._crit_edge.loopexit22_0&&gcd@tailrecurse.outer_0)->gcd@%or.cond2_0
  tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@_y2.tr3_0
  tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)->gcd@tailrecurse_0
  gcd@tailrecurse.outer._crit_edge.loopexit_0->((gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))||(gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0)))
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br1_0
  gcd@%.0.ph_0=gcd@%y1.tr.ph7_0
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->gcd@%_br_0
  gcd@%.0.ph_1=0
  (gcd@_y2.tr3_0&&tuple(gcd@_y2.tr3_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_0)
  (gcd@tailrecurse_0&&tuple(gcd@tailrecurse_0, gcd@tailrecurse.outer._crit_edge.loopexit_0))->(gcd@%.0.ph_2=gcd@%.0.ph_1)
  gcd@tailrecurse.outer._crit_edge_0->((gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)||(gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0))
  gcd@%.0_0=0
  gcd@%.0_1=gcd@%.0.ph_2
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit22_0)->(gcd@%.0_2=gcd@%.0_0)
  (gcd@tailrecurse.outer._crit_edge_0&&gcd@tailrecurse.outer._crit_edge.loopexit_0)->(gcd@%.0_2=gcd@%.0_1)
  gcd@tailrecurse.outer._crit_edge.split_0->(gcd@tailrecurse.outer._crit_edge.split_0&&gcd@tailrecurse.outer._crit_edge_0)
  gcd@tailrecurse.outer._crit_edge.split_0
]).
(gcd true false false gcd@%y1_0 gcd@%y2_0 gcd@%.0_0) <- (gcd@tailrecurse.outer._crit_edge.split gcd@%.0_0 gcd@%y2_0 gcd@%y1_0).
main@entry <- true.
main@entry.split <- (main@entry&&[&&
  true
  main@%_1_0<->(main@%_0_0<1)
  !main@%_1_0
  main@%_3_0<->(main@%_2_0<1)
  !main@%_3_0
  (gcd true false false main@%_0_0 main@%_2_0 main@%_4_0)
  main@%_5_0<->(main@%_4_0<1)
  main@%_6_0<->(main@%_0_0>0)
  main@%or.cond.i_0<->(main@%_6_0&&main@%_5_0)
  main@%_7_0<->(main@%_2_0>0)
  main@%or.cond1.i_0<->(main@%_7_0&&main@%or.cond.i_0)
  main@%or.cond1.i_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
(declare-fun gcd@%y2.tr3_1 () Int)
(declare-fun gcd@_y2.tr3_1 () Bool)
(declare-fun gcd@%y2.tr3_0 () Int)
(declare-fun gcd@%_br1_0 () Bool)
(declare-fun gcd@%y1.tr.ph7_0 () Int)
(declare-fun gcd@_7_0 () Bool)
(declare-fun gcd@tailrecurse_0 () Bool)
(declare-fun gcd@%y2.tr3_2 () Int)
(declare-fun gcd@_y2.tr3_0 () Bool)
(declare-fun gcd@%_8_0 () Bool)
(declare-fun gcd@%_br2_0 () Int)
(declare-fun gcd@%_br_0 () Bool)

(assert (not (and true (not (<= gcd@%y2.tr3_2 0)))))
(assert (and true (not (<= gcd@%y2.tr3_0 0))))
(assert (and true
     true
     (= gcd@%_br1_0 (= gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@_7_0 (and gcd@_7_0 gcd@_y2.tr3_0))
     (=> (and gcd@_7_0 gcd@_y2.tr3_0) (not gcd@%_br1_0))
     (= gcd@%_8_0 (< gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (= gcd@%_br2_0 (- gcd@%y2.tr3_0 gcd@%y1.tr.ph7_0))
     (=> gcd@tailrecurse_0 (and gcd@tailrecurse_0 gcd@_7_0))
     (=> (and gcd@tailrecurse_0 gcd@_7_0) (not gcd@%_8_0))
     (= gcd@%_br_0 (< gcd@%_br2_0 1))
     (=> gcd@_y2.tr3_1 (and gcd@_y2.tr3_1 gcd@tailrecurse_0))
     gcd@_y2.tr3_1
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (not gcd@%_br_0))
     (= gcd@%y2.tr3_1 gcd@%_br2_0)
     (=> (and gcd@_y2.tr3_1 gcd@tailrecurse_0) (= gcd@%y2.tr3_2 gcd@%y2.tr3_1))))
(check-sat)
UNSAT
==================================================================
FINAL INVARIANTS MAP:
REL: (verifier.error V_0 V_1 V_2), CAND: true
REL: (gcd@_tail V_0 V_1), CAND: true
REL: (gcd@.lr.ph..lr.ph.split_crit_edge V_0 V_1 V_2 V_3), CAND: (true&&(!(V_1<=0)))
REL: (gcd@_y2.tr3 V_0 V_1 V_2 V_3), CAND: (true&&(!(V_1<=0)))
REL: (gcd@tailrecurse.outer._crit_edge.split V_0 V_1 V_2), CAND: [||
  [&&
    true
    V_0<=0
    V_1<=0
  ]
  [&&
    true
    V_0<=0
    !(V_1<=0)
    V_2<=0
  ]
  true&&(!(V_0<=0))
]
REL: (gcd V_0 V_1 V_2 V_3 V_4 V_5), CAND: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    V_4<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    V_5<=0
    !(V_4<=0)
    V_3<=0
  ]
  [&&
    true
    !(!V_0)
    !V_1
    !(V_5<=0)
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
REL: main@entry, CAND: true
REL: main@entry.split, CAND: false
REL: pos.query.pred, CAND: true
RUN ICE SUCCESSCULLY

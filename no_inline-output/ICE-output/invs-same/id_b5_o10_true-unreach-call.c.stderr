WARNING RECURSION at id
SCC is: id 
REL NAME TO C5 NAME MAP:
verifier.error, PRED_0
id@_tail, PRED_1
id@UnifiedReturnBlock1.split, PRED_2
id, PRED_3
main@entry, PRED_4
main@entry.split, PRED_5
pos.query.pred, PRED_6
(verifier.error V_0 V_1 V_2)
(id@_tail V_0)
(id@UnifiedReturnBlock1.split V_0 V_1)
(id V_0 V_1 V_2 V_3 V_4)
(main@entry V_0)
main@entry.split
pos.query.pred
DB: 
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!true))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
(main@entry.split&&(main@entry 0))
NEG CEX IS: main@entry.split
ANSWER ARGS:
NEG CEX, INDEX IS 0
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  (main@entry 0)
  (id true false false id_3_1 10)
  (id@UnifiedReturnBlock1.split 10 0)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (id@UnifiedReturnBlock1.split 10 0)
ANSWER ARGS:
10
0
NEG CEX, INDEX IS 1
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  (main@entry 0)
  (id true false false id_3_1 10)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (id true false false id_3_1 10)
ANSWER ARGS:
true
false
false
id_3_1
UNCERTAIN VALUE: id_3_1
10
NEG CEX, INDEX IS 2
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
NEW CANDIDATE: false
TAG: PRED_3
NEW CANDIDATE: false
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : false
(id V_0 V_1 V_2 V_3 V_4) : false
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id@UnifiedReturnBlock1.split V_0 V_1)
POS CEX IS: (id@UnifiedReturnBlock1.split 0 0)
ANSWER ARGS:
0
0
POS CEX, INDEX IS 3
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!false))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 id_4_0))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 id_4_0)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
id_4_0
UNCERTAIN VALUE: id_4_0
POS CEX, INDEX IS 4
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=0))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(!V_0))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=0))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(!V_0))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id@UnifiedReturnBlock1.split 1 1)
  (id@_tail 1)
  (id true false false 0 0)
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id@UnifiedReturnBlock1.split V_0 V_1)
POS CEX IS: (id@UnifiedReturnBlock1.split 1 1)
ANSWER ARGS:
1
1
POS CEX, INDEX IS 5
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(!V_0))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id true true true id_3_0 id_4_0))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id true true true id_3_0 id_4_0)
ANSWER ARGS:
true
true
true
id_3_0
UNCERTAIN VALUE: id_3_0
id_4_0
UNCERTAIN VALUE: id_4_0
POS CEX, INDEX IS 6
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=0)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(!V_0)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0-PRED_2!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&((V_0-V_1)<=0))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=0))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&((V_0-V_1)<=0))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=0))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&((V_0-V_1)<=0))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=0))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 1))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 1)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
1
POS CEX, INDEX IS 7
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&((V_0-V_1)<=0)))
SAT, NEED TO ADD NEGATIVE DATA POINT
[&&
  main@entry.split
  (main@entry 2)
  (id true false false 10 10)
  (id@UnifiedReturnBlock1.split 10 10)
  (main@entry main@entry_0_0)
]
NEG CEX IS: (id@UnifiedReturnBlock1.split 10 10)
ANSWER ARGS:
10
10
NEG CEX, INDEX IS 8
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=0)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=1))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=1))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=1))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=1))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=1))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id@UnifiedReturnBlock1.split 2 2)
  (id@_tail 2)
  (id true false false 1 1)
  (id@UnifiedReturnBlock1.split 1 1)
  (id@_tail 1)
  (id true false false 0 0)
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id@UnifiedReturnBlock1.split V_0 V_1)
POS CEX IS: (id@UnifiedReturnBlock1.split 2 2)
ANSWER ARGS:
2
2
POS CEX, INDEX IS 9
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=1))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 2))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 2)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
2
POS CEX, INDEX IS 10
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=1)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=1)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=2))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=2))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=2))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=2))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=2))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id@UnifiedReturnBlock1.split 3 3)
  (id@_tail 3)
  (id true false false 2 2)
  (id@UnifiedReturnBlock1.split 2 2)
  (id@_tail 2)
  (id true false false 1 1)
  (id@UnifiedReturnBlock1.split 1 1)
  (id@_tail 1)
  (id true false false 0 0)
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id@UnifiedReturnBlock1.split V_0 V_1)
POS CEX IS: (id@UnifiedReturnBlock1.split 3 3)
ANSWER ARGS:
3
3
POS CEX, INDEX IS 11
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=2))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 3))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 3)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
3
POS CEX, INDEX IS 12
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=2)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=2)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=3))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=3))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=3))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=3))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=3))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id@UnifiedReturnBlock1.split 4 4)
  (id@_tail 4)
  (id true false false 3 3)
  (id@UnifiedReturnBlock1.split 3 3)
  (id@_tail 3)
  (id true false false 2 2)
  (id@UnifiedReturnBlock1.split 2 2)
  (id@_tail 2)
  (id true false false 1 1)
  (id@UnifiedReturnBlock1.split 1 1)
  (id@_tail 1)
  (id true false false 0 0)
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id@UnifiedReturnBlock1.split V_0 V_1)
POS CEX IS: (id@UnifiedReturnBlock1.split 4 4)
ANSWER ARGS:
4
4
POS CEX, INDEX IS 13
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=3))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 4))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 4)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
4
POS CEX, INDEX IS 14
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=3)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=3)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=4))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=4))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=4))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=4))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=4))))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id@UnifiedReturnBlock1.split 5 5)
  (id@_tail 5)
  (id true false false 4 4)
  (id@UnifiedReturnBlock1.split 4 4)
  (id@_tail 4)
  (id true false false 3 3)
  (id@UnifiedReturnBlock1.split 3 3)
  (id@_tail 3)
  (id true false false 2 2)
  (id@UnifiedReturnBlock1.split 2 2)
  (id@_tail 2)
  (id true false false 1 1)
  (id@UnifiedReturnBlock1.split 1 1)
  (id@_tail 1)
  (id true false false 0 0)
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id@UnifiedReturnBlock1.split V_0 V_1)
POS CEX IS: (id@UnifiedReturnBlock1.split 5 5)
ANSWER ARGS:
5
5
POS CEX, INDEX IS 15
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=4))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 5))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 5)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
5
POS CEX, INDEX IS 16
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=4)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=4)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=5))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=5))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=5))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 6))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 6)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
6
POS CEX, INDEX IS 17
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=5)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=6))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=6))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=6))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 7))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 7)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
7
POS CEX, INDEX IS 18
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=6)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=7))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=7))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=7))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 8))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 8)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
8
POS CEX, INDEX IS 19
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=7)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=8))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=8))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=8))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 9))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 9)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
9
POS CEX, INDEX IS 20
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=8)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(!V_0))||[&&
  true
  !(!V_0)
  !(!V_1)
])
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : ((true&&(!V_0))||[&&
  true
  !(!V_0)
  !(!V_1)
])
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!((true&&(!V_0))||[&&
    true
    !(!V_0)
    !(!V_1)
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
[&&
  pos.query.pred
  (id true false false 0 0)
  (id@UnifiedReturnBlock1.split 0 0)
  (id@_tail 0)
  (id false false false -1 5)
]
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id true false false 0 0)
ANSWER ARGS:
true
false
false
0
0
POS CEX, INDEX IS 21
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&((true&&(!V_0))||[&&
  true
  !(!V_0)
  !(!V_1)
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_4<=9))
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : (true&&(V_4<=9))
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!(true&&(V_4<=9))))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id false false false id_3_0 10))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id false false false id_3_0 10)
ANSWER ARGS:
false
false
false
id_3_0
UNCERTAIN VALUE: id_3_0
10
POS CEX, INDEX IS 22
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_4<=9)))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=5
])
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=5
])
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!((true&&(!V_0))||[&&
    true
    !(!V_0)
    V_4<=5
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id true true true id_3_0 6))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id true true true id_3_0 6)
ANSWER ARGS:
true
true
true
id_3_0
UNCERTAIN VALUE: id_3_0
6
POS CEX, INDEX IS 23
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=5
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=8
])
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=8
])
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!((true&&(!V_0))||[&&
    true
    !(!V_0)
    V_4<=8
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id true true true id_3_0 9))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id true true true id_3_0 9)
ANSWER ARGS:
true
true
true
id_3_0
UNCERTAIN VALUE: id_3_0
9
POS CEX, INDEX IS 24
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=8
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
NEW CANDIDATE: ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=9
])
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : ((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=9
])
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(!((true&&(!V_0))||[&&
    true
    !(!V_0)
    V_4<=9
  ])))
SAT, NEED TO ADD POSITIVE DATA POINT
(pos.query.pred&&(id true true true id_3_0 10))
POS OBJ PRED: (id V_0 V_1 V_2 V_3 V_4)
POS CEX IS: (id true true true id_3_0 10)
ANSWER ARGS:
true
true
true
id_3_0
UNCERTAIN VALUE: id_3_0
10
POS CEX, INDEX IS 25
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&((true&&(!V_0))||[&&
  true
  !(!V_0)
  V_4<=9
]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
DATA & IMPL FILES ARE GENERATED
TAG: PRED_0
NEW CANDIDATE: true
TAG: PRED_1
NEW CANDIDATE: true
TAG: PRED_2
INTERNAL NODE
CUT ATTRIBUTE: PRED_2!V_0
LEAF NODE
LEAF NODE
NEW CANDIDATE: (true&&(V_0<=5))
TAG: PRED_3
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_0
LEAF NODE
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_1
INTERNAL NODE
CUT ATTRIBUTE: PRED_3!V_4
LEAF NODE
LEAF NODE
LEAF NODE
NEW CANDIDATE: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_4<=5
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
TAG: PRED_4
NEW CANDIDATE: true
TAG: PRED_5
NEW CANDIDATE: false
TAG: PRED_6
NEW CANDIDATE: true
NEW CANDIDATES MAP:
(verifier.error V_0 V_1 V_2) : true
(id@_tail V_0) : true
(id@UnifiedReturnBlock1.split V_0 V_1) : (true&&(V_0<=5))
(id V_0 V_1 V_2 V_3 V_4) : [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_4<=5
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
(main@entry V_0) : true
main@entry.split : false
pos.query.pred : true
ENTRY IS: (main@entry @__VERIFIER_nondet_int_0)
=========================== POS START ============================
VERIFY RULE: pos.query.pred <- ((id@UnifiedReturnBlock1.split V_0 V_1)&&(!(true&&(V_0<=5))))
UNSAT
VERIFY RULE: pos.query.pred <- (pos.query.pred&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- (main@entry.split&&(!false))
UNSAT
VERIFY RULE: pos.query.pred <- ((id@_tail V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry V_0)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((verifier.error V_0 V_1 V_2)&&(!true))
UNSAT
VERIFY RULE: pos.query.pred <- ((id V_0 V_1 V_2 V_3 V_4)&&(![||
    true&&(!V_0)
    [&&
      true
      !(!V_0)
      !V_1
      V_4<=5
    ]
    [&&
      true
      !(!V_0)
      !(!V_1)
    ]
  ]))
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== NEG START ============================
VERIFY RULE: (main@entry V_0) <- true
UNSAT
VERIFY RULE: (id@_tail V_0) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: pos.query.pred <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&false)
UNSAT
VERIFY RULE: (id@UnifiedReturnBlock1.split V_0 V_1) <- ((main@entry @__VERIFIER_nondet_int_0)&&(true&&(V_0<=5)))
UNSAT
VERIFY RULE: (verifier.error V_0 V_1 V_2) <- ((main@entry @__VERIFIER_nondet_int_0)&&true)
UNSAT
VERIFY RULE: (id V_0 V_1 V_2 V_3 V_4) <- ((main@entry @__VERIFIER_nondet_int_0)&&[||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_4<=5
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
])
UNSAT
==================================================================
AFTER RESET DB IS:
Predicates:
;[fdecl
  verifier.error
  BOOL
  BOOL
  BOOL
  BOOL
]
[fdecl
  id@_tail
  INT
  BOOL
]
[fdecl
  id@UnifiedReturnBlock1.split
  INT
  INT
  BOOL
]
[fdecl
  id
  BOOL
  BOOL
  BOOL
  INT
  INT
  BOOL
]
[fdecl
  main@entry
  INT
  BOOL
]
[fdecl
  main@entry.split
  BOOL
]
[fdecl
  pos.query.pred
  BOOL
]
Clauses:
;(verifier.error false false false) <- true.
(verifier.error false true true) <- true.
(verifier.error true false true) <- true.
(verifier.error true true true) <- true.
(id true true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false true true id@%x_0 id@%UnifiedRetVal_0) <- true.
(id false false false id@%x_0 id@%UnifiedRetVal_0) <- true.
(id@_tail id@%x_0) <- true.
(id@UnifiedReturnBlock1.split id@%UnifiedRetVal_2 id@%x_0) <- ((id@_tail id@%x_0)&&[&&
  true
  id@%_br_0<->(id@%x_0=0)
  id@_3_0->(id@_3_0&&id@_tail_0)
  (id@_3_0&&id@_tail_0)->(!id@%_br_0)
  id@%_4_0=(id@%x_0+-1)
  (id id@_3_0 false false id@%_4_0 id@%_tail2_0)
  id@%_6_0<->(id@%_tail2_0>4)
  id@%_._0=(id@%_tail2_0+1)
  id@%._0=ite(id@%_6_0, 5, id@%_._0)
  id@UnifiedReturnBlock_0->(id@UnifiedReturnBlock_0&&id@_tail_0)
  (id@UnifiedReturnBlock_0&&id@_tail_0)->id@%_br_0
  id@UnifiedReturnBlock1_0->((id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)||(id@UnifiedReturnBlock1_0&&id@_3_0))
  id@%UnifiedRetVal_0=0
  id@%UnifiedRetVal_1=id@%._0
  (id@UnifiedReturnBlock1_0&&id@UnifiedReturnBlock_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_0)
  (id@UnifiedReturnBlock1_0&&id@_3_0)->(id@%UnifiedRetVal_2=id@%UnifiedRetVal_1)
  id@UnifiedReturnBlock1.split_0->(id@UnifiedReturnBlock1.split_0&&id@UnifiedReturnBlock1_0)
  id@UnifiedReturnBlock1.split_0
]).
(id true false false id@%x_0 id@%UnifiedRetVal_0) <- (id@UnifiedReturnBlock1.split id@%UnifiedRetVal_0 id@%x_0).
(main@entry @__VERIFIER_nondet_int_0) <- true.
main@entry.split <- ((main@entry @__VERIFIER_nondet_int_0)&&[&&
  true
  main@%_0_0=@__VERIFIER_nondet_int_0
  (id true false false main@%_1_0 main@%_2_0)
  main@%_3_0<->(main@%_2_0=10)
  main@%_3_0
  main@entry.split_0->(main@entry.split_0&&main@entry_0)
  main@entry.split_0
]).
Queries:
;main@entry.split
=========================== IMPL START ============================
==================================================================
FINAL INVARIANTS MAP:
REL: (verifier.error V_0 V_1 V_2), CAND: true
REL: (id@_tail V_0), CAND: true
REL: (id@UnifiedReturnBlock1.split V_0 V_1), CAND: (true&&(V_0<=5))
REL: (id V_0 V_1 V_2 V_3 V_4), CAND: [||
  true&&(!V_0)
  [&&
    true
    !(!V_0)
    !V_1
    V_4<=5
  ]
  [&&
    true
    !(!V_0)
    !(!V_1)
  ]
]
REL: (main@entry V_0), CAND: true
REL: main@entry.split, CAND: false
REL: pos.query.pred, CAND: true
RUN ICE SUCCESSCULLY
